/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, AddressLike, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../../common.js"
  import type { MultiUpdater, MultiUpdaterInterface } from "../../IAutoPriceFeed.sol/MultiUpdater.js";

  const _abi = [
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_priceFeed",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "address",
        "name": "backend",
        "type": "address"
      }
    ],
    "name": "BackendAdded",
    "type": "event"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": false,
        "internalType": "address",
        "name": "backend",
        "type": "address"
      }
    ],
    "name": "BackendRemoved",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_backend",
        "type": "address"
      }
    ],
    "name": "addBackend",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "authorizedBackends",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "backendCount",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "priceFeed",
    "outputs": [
      {
        "internalType": "contract IAutoPriceFeed",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_backend",
        "type": "address"
      }
    ],
    "name": "removeBackend",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "int256",
        "name": "_newPrice",
        "type": "int256"
      }
    ],
    "name": "updatePrice",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
] as const;

  const _bytecode = "0x608060405234801561000f575f5ffd5b5060405161106b38038061106b83398181016040528101906100319190610171565b805f5f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503360015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060016003819055505061019c565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61014082610117565b9050919050565b61015081610136565b811461015a575f5ffd5b50565b5f8151905061016b81610147565b92915050565b5f6020828403121561018657610185610113565b5b5f6101938482850161015d565b91505092915050565b610ec2806101a95f395ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c8063741bef1a11610059578063741bef1a146100d55780638da5cb5b146100f3578063d4c19bda14610111578063e712a35d1461012d5761007b565b8063140ab2601461007f5780632ac016ad1461009b57806372f648ae146100b7575b5f5ffd5b610099600480360381019061009491906108ac565b61015d565b005b6100b560048036038101906100b091906108ac565b61031a565b005b6100bf6104d9565b6040516100cc91906108ef565b60405180910390f35b6100dd6104df565b6040516100ea9190610963565b60405180910390f35b6100fb610503565b604051610108919061098b565b60405180910390f35b61012b600480360381019061012691906109d7565b610528565b005b610147600480360381019061014291906108ac565b610831565b6040516101549190610a1c565b60405180910390f35b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e390610a8f565b60405180910390fd5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16610275576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026c90610af7565b60405180910390fd5b5f60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060035f8154809291906102db90610b42565b91905055507f8bf2d999ba70510845faea819993b3b9dd832fb22087f55945f4e033b60bee9a8160405161030f919061098b565b60405180910390a150565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103a090610a8f565b60405180910390fd5b60025f8273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff1615610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90610bb3565b60405180910390fd5b600160025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555060035f81548092919061049a90610bd1565b91905055507ffaa2aee95dd4078a9e6472fff853fa8abf388337b310f91bd6be43d30c073d01816040516104ce919061098b565b60405180910390a150565b60035481565b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff166105b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a890610c62565b60405180910390fd5b5f81136105f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ea90610cca565b60405180910390fd5b5f5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ff186b2e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561065d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106819190610cfc565b90505f8113610716575f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c64d5ec2836040518263ffffffff1660e01b81526004016106e39190610d36565b5f604051808303815f87803b1580156106fa575f5ffd5b505af115801561070c573d5f5f3e3d5ffd5b505050505061082e565b808213801561073b575060c88161072d9190610d7c565b81836107399190610de4565b135b8061076757508082128015610766575060c8816107589190610d7c565b82826107649190610de4565b135b5b6107a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079d90610e6e565b60405180910390fd5b5f5f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c64d5ec2836040518263ffffffff1660e01b81526004016107ff9190610d36565b5f604051808303815f87803b158015610816575f5ffd5b505af1158015610828573d5f5f3e3d5ffd5b50505050505b50565b6002602052805f5260405f205f915054906101000a900460ff1681565b5f5ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61087b82610852565b9050919050565b61088b81610871565b8114610895575f5ffd5b50565b5f813590506108a681610882565b92915050565b5f602082840312156108c1576108c061084e565b5b5f6108ce84828501610898565b91505092915050565b5f819050919050565b6108e9816108d7565b82525050565b5f6020820190506109025f8301846108e0565b92915050565b5f819050919050565b5f61092b61092661092184610852565b610908565b610852565b9050919050565b5f61093c82610911565b9050919050565b5f61094d82610932565b9050919050565b61095d81610943565b82525050565b5f6020820190506109765f830184610954565b92915050565b61098581610871565b82525050565b5f60208201905061099e5f83018461097c565b92915050565b5f819050919050565b6109b6816109a4565b81146109c0575f5ffd5b50565b5f813590506109d1816109ad565b92915050565b5f602082840312156109ec576109eb61084e565b5b5f6109f9848285016109c3565b91505092915050565b5f8115159050919050565b610a1681610a02565b82525050565b5f602082019050610a2f5f830184610a0d565b92915050565b5f82825260208201905092915050565b7f436869206f776e657200000000000000000000000000000000000000000000005f82015250565b5f610a79600983610a35565b9150610a8482610a45565b602082019050919050565b5f6020820190508181035f830152610aa681610a6d565b9050919050565b7f4b686f6e6720746f6e20746169000000000000000000000000000000000000005f82015250565b5f610ae1600d83610a35565b9150610aec82610aad565b602082019050919050565b5f6020820190508181035f830152610b0e81610ad5565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610b4c826108d7565b91505f8203610b5e57610b5d610b15565b5b600182039050919050565b7f446120746f6e20746169000000000000000000000000000000000000000000005f82015250565b5f610b9d600a83610a35565b9150610ba882610b69565b602082019050919050565b5f6020820190508181035f830152610bca81610b91565b9050919050565b5f610bdb826108d7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610c0d57610c0c610b15565b5b600182019050919050565b7f4b686f6e6720636f20717579656e0000000000000000000000000000000000005f82015250565b5f610c4c600e83610a35565b9150610c5782610c18565b602082019050919050565b5f6020820190508181035f830152610c7981610c40565b9050919050565b7f47696120736169000000000000000000000000000000000000000000000000005f82015250565b5f610cb4600783610a35565b9150610cbf82610c80565b602082019050919050565b5f6020820190508181035f830152610ce181610ca8565b9050919050565b5f81519050610cf6816109ad565b92915050565b5f60208284031215610d1157610d1061084e565b5b5f610d1e84828501610ce8565b91505092915050565b610d30816109a4565b82525050565b5f602082019050610d495f830184610d27565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f610d86826109a4565b9150610d91836109a4565b925082610da157610da0610d4f565b5b60015f0383147f800000000000000000000000000000000000000000000000000000000000000083141615610dd957610dd8610b15565b5b828205905092915050565b5f610dee826109a4565b9150610df9836109a4565b925082820390508181125f8412168282135f851215161715610e1e57610e1d610b15565b5b92915050565b7f476961206b686f6e67207468617920646f6920647500000000000000000000005f82015250565b5f610e58601583610a35565b9150610e6382610e24565b602082019050919050565b5f6020820190508181035f830152610e8581610e4c565b905091905056fea26469706673582212209e2118b174982a816403e94d1d9d08508626df7f109a1e76e58433d402f3271264736f6c634300081c0033";

  
      type MultiUpdaterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: MultiUpdaterConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class MultiUpdater__factory extends ContractFactory {
    
      constructor(...args: MultiUpdaterConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(_priceFeed: AddressLike, overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(_priceFeed, overrides || {});
    };
    override deploy(_priceFeed: AddressLike, overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(_priceFeed, overrides || {}) as Promise<MultiUpdater & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): MultiUpdater__factory {
      return super.connect(runner) as MultiUpdater__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): MultiUpdaterInterface {
      return new Interface(_abi) as MultiUpdaterInterface;
    }
    
    override attach(address: string | Addressable): MultiUpdater {
      return super.attach(address) as MultiUpdater;
    }
  static connect(address: string, runner?: ContractRunner | null): MultiUpdater {
      return new Contract(address, _abi, runner) as unknown as MultiUpdater;
    }
  }

  
  