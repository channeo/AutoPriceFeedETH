/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "../common.js"
  

  export interface MultiUpdaterInterface extends Interface {
    getFunction(nameOrSignature: "addBackend" | "authorizedBackends" | "backendCount" | "owner" | "priceFeed" | "removeBackend" | "updatePrice"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "BackendAdded" | "BackendRemoved"): EventFragment;

    encodeFunctionData(functionFragment: 'addBackend', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'authorizedBackends', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'backendCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string;
encodeFunctionData(functionFragment: 'removeBackend', values: [AddressLike]): string;
encodeFunctionData(functionFragment: 'updatePrice', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'addBackend', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'authorizedBackends', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'backendCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'removeBackend', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'updatePrice', data: BytesLike): Result;
  }

  
    export namespace BackendAddedEvent {
      export type InputTuple = [backend: AddressLike];
      export type OutputTuple = [backend: string];
      export interface OutputObject {backend: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace BackendRemovedEvent {
      export type InputTuple = [backend: AddressLike];
      export type OutputTuple = [backend: string];
      export interface OutputObject {backend: string };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface MultiUpdater extends BaseContract {
    
    connect(runner?: ContractRunner | null): MultiUpdater;
    waitForDeployment(): Promise<this>;

    interface: MultiUpdaterInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    addBackend: TypedContractMethod<
      [_backend: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    authorizedBackends: TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >
    

    
    backendCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    priceFeed: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    removeBackend: TypedContractMethod<
      [_backend: AddressLike, ],
      [void],
      'nonpayable'
    >
    

    
    updatePrice: TypedContractMethod<
      [_newPrice: BigNumberish, ],
      [void],
      'nonpayable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'addBackend'): TypedContractMethod<
      [_backend: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'authorizedBackends'): TypedContractMethod<
      [arg0: AddressLike, ],
      [boolean],
      'view'
    >;
getFunction(nameOrSignature: 'backendCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'priceFeed'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'removeBackend'): TypedContractMethod<
      [_backend: AddressLike, ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'updatePrice'): TypedContractMethod<
      [_newPrice: BigNumberish, ],
      [void],
      'nonpayable'
    >;

    getEvent(key: 'BackendAdded'): TypedContractEvent<BackendAddedEvent.InputTuple, BackendAddedEvent.OutputTuple, BackendAddedEvent.OutputObject>;
getEvent(key: 'BackendRemoved'): TypedContractEvent<BackendRemovedEvent.InputTuple, BackendRemovedEvent.OutputTuple, BackendRemovedEvent.OutputObject>;

    filters: {
      
      'BackendAdded(address)': TypedContractEvent<BackendAddedEvent.InputTuple, BackendAddedEvent.OutputTuple, BackendAddedEvent.OutputObject>;
      BackendAdded: TypedContractEvent<BackendAddedEvent.InputTuple, BackendAddedEvent.OutputTuple, BackendAddedEvent.OutputObject>;
    

      'BackendRemoved(address)': TypedContractEvent<BackendRemovedEvent.InputTuple, BackendRemovedEvent.OutputTuple, BackendRemovedEvent.OutputObject>;
      BackendRemoved: TypedContractEvent<BackendRemovedEvent.InputTuple, BackendRemovedEvent.OutputTuple, BackendRemovedEvent.OutputObject>;
    
    };
  }